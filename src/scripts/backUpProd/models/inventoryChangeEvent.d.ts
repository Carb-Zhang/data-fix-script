// This file is generated by tsc. Don't edit it!
import { Document, Types, LeanDocument } from 'mongoose';
export declare enum InventoryChangeUpdateType {
    INC = 'INC',
    SET = 'SET',
}
export declare enum InventoryChangeUpdateRule {
    ALLOW_NEGATIVE = 'ALLOW_NEGATIVE',
    NOT_ALLOW_NEGATIVE = 'NOT_ALLOW_NEGATIVE',
    EXPECT_MIN_QUANTITY_BEFORE_UPDATE = 'EXPECT_MIN_QUANTITY_BEFORE_UPDATE',
}
export declare enum InventoryChangeRule {
    SKIP_NONE_EXIST_INVENTORY = 'SKIP_NONE_EXIST_INVENTORY',
    SKIP_TYPE_CHANGED_INVENTORY = 'SKIP_TYPE_CHANGED_INVENTORY',
}
export declare enum InventoryChangeUpdateStatus {
    SUCCESS = 'SUCCESS',
    SKIPPED = 'SKIPPED',
    FAIL = 'FAIL',
    ROLLBACKED = 'ROLLBACKED',
    ROLLBACK_FAIL = 'ROLLBACK_FAIL',
}
export declare enum InventoryChangeEventType {
    STOCK_PURCHASE = 'STOCK_PURCHASE',
    STOCK_RETURN = 'STOCK_RETURN',
    STOCK_TRANSFER = 'STOCK_TRANSFER',
    STOCK_TAKE = 'STOCK_TAKE',
    ORDER_OFFLINE_PLACE = 'ORDER_OFFLINE_PLACE',
    ORDER_OFFLINE_CANCEL = 'ORDER_OFFLINE_CANCEL',
    ORDER_OFFLINE_RESTOCK = 'ORDER_OFFLINE_RESTOCK',
    MANUAL_EDIT_INVENTORY = 'MANUAL_EDIT_INVENTORY',
    PRODUCTS_IMPORT = 'PRODUCTS_IMPORT',
    ORDER_ONLINE_BEEP_PAY_FIRST_PLACE = 'ORDER_ONLINE_BEEP_PAY_FIRST_PLACE',
    ORDER_ONLINE_BEEP_PAY_FIRST_CANCEL = 'ORDER_ONLINE_BEEP_PAY_FIRST_CANCEL',
    ORDER_ONLINE_BEEP_PAY_LATER_PLACE = 'ORDER_ONLINE_BEEP_PAY_LATER_PLACE',
    ORDER_ONLINE_BEEP_PAY_LATER_CANCEL = 'ORDER_ONLINE_BEEP_PAY_LATER_CANCEL',
    ORDER_ONLINE_THIRD_PARTY_PLACE = 'ORDER_ONLINE_THIRD_PARTY_PLACE',
    ORDER_ONLINE_THIRD_PARTY_CANCEL = 'ORDER_ONLINE_THIRD_PARTY_CANCEL',
}
export declare enum InventoryChangeEventStatus {
    IN_PROGRESS = 'IN_PROGRESS',
    SUCCESS = 'SUCCESS',
    UPDATE_FAIL = 'UPDATE_FAIL',
    VALIDATE_FAIL = 'VALIDATE_FAIL',
    ROLLBACKED = 'ROLLBACKED',
    ROLLBACK_FAIL = 'ROLLBACK_FAIL',
}
export interface IInventoryChangeUpdate {
    productId: string;
    updateType: InventoryChangeUpdateType;
    updateAmount: number;
    storeId?: string;
    restockLevel?: number;
    desiredStockLevel?: number;
    updateRule?: InventoryChangeUpdateRule;
    expectMinQuantity?: number;
    amountBefore?: number;
    amountAfter?: number;
    status?: InventoryChangeUpdateStatus;
    updatedAt?: Date;
    failedAt?: Date;
    rollbackedAt?: Date;
    rollbackFailedAt?: Date;
    failReason?: string;
    rollbackFailReason?: string;
}
export interface IInventoryChangeEvent {
    eventId: string;
    business: string;
    storeId: string;
    eventType: InventoryChangeEventType;
    eventStartAt: Date;
    updateRule: InventoryChangeUpdateRule;
    updates: IInventoryChangeUpdate[];
    createInvIfNotExist: boolean;
    needDedupMsg: boolean;
    sourceInfo: {
        refId: string;
        customFields?: Record<string, string>;
    };
    rules?: InventoryChangeRule[];
    status: InventoryChangeEventStatus;
    succeededAt?: Date;
    failedAt?: Date;
    rollbackedAt?: Date;
    rollbackFailedAt?: Date;
    failReason?: string;
    retryCount?: number;
    isNeedManualCheck?: boolean;
    isEventIdsCleared?: boolean;
    createdAt?: Date;
}
export declare type InventoryChangeEventDoc = IInventoryChangeEvent & Document<Types.ObjectId>;
export declare type InventoryChangeEventDocPOJO = LeanDocument<InventoryChangeEventDoc>;
declare const _default: import('mongoose').Model<InventoryChangeEventDoc, {}, {}>;
export default _default;
