// This file is generated by tsc. Don't edit it!
'use strict';
exports.__esModule = true;
exports.InventoryChangeEventStatus =
    exports.InventoryChangeEventType =
    exports.InventoryChangeUpdateStatus =
    exports.InventoryChangeRule =
    exports.InventoryChangeUpdateRule =
    exports.InventoryChangeUpdateType =
        void 0;
var mongoose_1 = require('mongoose');
var InventoryChangeUpdateType;
(function (InventoryChangeUpdateType) {
    InventoryChangeUpdateType['INC'] = 'INC';
    InventoryChangeUpdateType['SET'] = 'SET';
})(
    (InventoryChangeUpdateType =
        exports.InventoryChangeUpdateType || (exports.InventoryChangeUpdateType = {})),
);
var InventoryChangeUpdateRule;
(function (InventoryChangeUpdateRule) {
    InventoryChangeUpdateRule['ALLOW_NEGATIVE'] = 'ALLOW_NEGATIVE';
    InventoryChangeUpdateRule['NOT_ALLOW_NEGATIVE'] = 'NOT_ALLOW_NEGATIVE';
    InventoryChangeUpdateRule['EXPECT_MIN_QUANTITY_BEFORE_UPDATE'] =
        'EXPECT_MIN_QUANTITY_BEFORE_UPDATE';
})(
    (InventoryChangeUpdateRule =
        exports.InventoryChangeUpdateRule || (exports.InventoryChangeUpdateRule = {})),
);
var InventoryChangeRule;
(function (InventoryChangeRule) {
    InventoryChangeRule['SKIP_NONE_EXIST_INVENTORY'] = 'SKIP_NONE_EXIST_INVENTORY';
    InventoryChangeRule['SKIP_TYPE_CHANGED_INVENTORY'] = 'SKIP_TYPE_CHANGED_INVENTORY';
})((InventoryChangeRule = exports.InventoryChangeRule || (exports.InventoryChangeRule = {})));
var InventoryChangeUpdateStatus;
(function (InventoryChangeUpdateStatus) {
    InventoryChangeUpdateStatus['SUCCESS'] = 'SUCCESS';
    InventoryChangeUpdateStatus['SKIPPED'] = 'SKIPPED';
    InventoryChangeUpdateStatus['FAIL'] = 'FAIL';
    InventoryChangeUpdateStatus['ROLLBACKED'] = 'ROLLBACKED';
    InventoryChangeUpdateStatus['ROLLBACK_FAIL'] = 'ROLLBACK_FAIL';
})(
    (InventoryChangeUpdateStatus =
        exports.InventoryChangeUpdateStatus || (exports.InventoryChangeUpdateStatus = {})),
);
var InventoryChangeEventType;
(function (InventoryChangeEventType) {
    InventoryChangeEventType['STOCK_PURCHASE'] = 'STOCK_PURCHASE';
    InventoryChangeEventType['STOCK_RETURN'] = 'STOCK_RETURN';
    InventoryChangeEventType['STOCK_TRANSFER'] = 'STOCK_TRANSFER';
    InventoryChangeEventType['STOCK_TAKE'] = 'STOCK_TAKE';
    InventoryChangeEventType['ORDER_OFFLINE_PLACE'] = 'ORDER_OFFLINE_PLACE';
    InventoryChangeEventType['ORDER_OFFLINE_CANCEL'] = 'ORDER_OFFLINE_CANCEL';
    InventoryChangeEventType['ORDER_OFFLINE_RESTOCK'] = 'ORDER_OFFLINE_RESTOCK';
    InventoryChangeEventType['MANUAL_EDIT_INVENTORY'] = 'MANUAL_EDIT_INVENTORY';
    InventoryChangeEventType['PRODUCTS_IMPORT'] = 'PRODUCTS_IMPORT';
    InventoryChangeEventType['ORDER_ONLINE_BEEP_PAY_FIRST_PLACE'] =
        'ORDER_ONLINE_BEEP_PAY_FIRST_PLACE';
    InventoryChangeEventType['ORDER_ONLINE_BEEP_PAY_FIRST_CANCEL'] =
        'ORDER_ONLINE_BEEP_PAY_FIRST_CANCEL';
    InventoryChangeEventType['ORDER_ONLINE_BEEP_PAY_LATER_PLACE'] =
        'ORDER_ONLINE_BEEP_PAY_LATER_PLACE';
    InventoryChangeEventType['ORDER_ONLINE_BEEP_PAY_LATER_CANCEL'] =
        'ORDER_ONLINE_BEEP_PAY_LATER_CANCEL';
    InventoryChangeEventType['ORDER_ONLINE_THIRD_PARTY_PLACE'] = 'ORDER_ONLINE_THIRD_PARTY_PLACE';
    InventoryChangeEventType['ORDER_ONLINE_THIRD_PARTY_CANCEL'] = 'ORDER_ONLINE_THIRD_PARTY_CANCEL';
})(
    (InventoryChangeEventType =
        exports.InventoryChangeEventType || (exports.InventoryChangeEventType = {})),
);
var InventoryChangeEventStatus;
(function (InventoryChangeEventStatus) {
    InventoryChangeEventStatus['IN_PROGRESS'] = 'IN_PROGRESS';
    InventoryChangeEventStatus['SUCCESS'] = 'SUCCESS';
    InventoryChangeEventStatus['UPDATE_FAIL'] = 'UPDATE_FAIL';
    InventoryChangeEventStatus['VALIDATE_FAIL'] = 'VALIDATE_FAIL';
    InventoryChangeEventStatus['ROLLBACKED'] = 'ROLLBACKED';
    InventoryChangeEventStatus['ROLLBACK_FAIL'] = 'ROLLBACK_FAIL';
})(
    (InventoryChangeEventStatus =
        exports.InventoryChangeEventStatus || (exports.InventoryChangeEventStatus = {})),
);
var inventoryChangeUpdateSchema = new mongoose_1.Schema({
    // raw info
    productId: String,
    updateType: { type: String, enum: Object.values(InventoryChangeUpdateType) },
    updateAmount: Number,
    storeId: String,
    restockLevel: Number,
    desiredStockLevel: Number,
    updateRule: { type: String, enum: Object.values(InventoryChangeUpdateRule) },
    expectMinQuantity: Number,
    // track info
    amountBefore: Number,
    amountAfter: Number,
    status: { type: String, enum: Object.values(InventoryChangeUpdateStatus) },
    updatedAt: Date,
    failedAt: Date,
    rollbackedAt: Date,
    rollbackFailedAt: Date,
    failReason: String,
    rollbackFailReason: String,
});
var inventoryChangeEventSchema = new mongoose_1.Schema(
    {
        // raw info
        eventId: String,
        business: String,
        storeId: String,
        eventType: { type: String, enum: Object.values(InventoryChangeEventType) },
        eventStartAt: Date,
        updateRule: { type: String, enum: Object.values(InventoryChangeUpdateRule) },
        rules: {
            type: [
                {
                    type: String,
                    enum: Object.values(InventoryChangeRule),
                },
            ],
        },
        updates: [inventoryChangeUpdateSchema],
        createInvIfNotExist: Boolean,
        needDedupMsg: Boolean,
        sourceInfo: {
            refId: String,
            customFields: mongoose_1.Schema.Types.Mixed,
        },
        // track info
        status: { type: String, enum: Object.values(InventoryChangeEventStatus) },
        succeededAt: Date,
        failedAt: Date,
        rollbackedAt: Date,
        rollbackFailedAt: Date,
        failReason: String,
        retryCount: Number,
        isNeedManualCheck: Boolean,
        isEventIdsCleared: Boolean,
    },
    {
        autoIndex: process.env.NODE_ENV == 'development',
        timestamps: true,
    },
);
inventoryChangeEventSchema.index({ eventId: 1 }, { unique: true });
inventoryChangeEventSchema.index({ 'sourceInfo.refId': 1 });
inventoryChangeEventSchema.index({ createdAt: 1 });
inventoryChangeEventSchema.index({ succeededAt: 1 });
inventoryChangeEventSchema.index({ 'updates.productId': 1 });
exports['default'] = (0, mongoose_1.model)('inventoryChangeEvent', inventoryChangeEventSchema);
